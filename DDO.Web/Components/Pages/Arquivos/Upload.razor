<<<<<<< HEAD
@page "/arquivos/upload"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using DDO.Application.Services
@using DDO.Application.Interfaces
@using DDO.Core.Entities
@using System.Security.Claims
@attribute [Authorize]
@inject FileUploadService FileUploadService
@inject IAreaRepository AreaRepository
@inject IJSRuntime JSRuntime

<PageTitle>Upload de PDFs - DDO Controle de Ponto</PageTitle>

<div class="page-header">
    <h1 class="page-title">
        <span class="bi bi-cloud-upload me-2"></span>
        Upload de Arquivos PDF
    </h1>
    <p class="page-subtitle">Envie arquivos PDF do DDO para o sistema</p>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <span class="bi bi-file-earmark-pdf me-2"></span>
                    Selecionar Arquivo
                </h5>
            </div>
            <div class="card-body">
                <EditForm Model="@uploadModel" OnValidSubmit="@HandleUpload">
                    <DataAnnotationsValidator />
                    
                    <div class="mb-3">
                        <label class="form-label">Arquivo PDF *</label>
                        <div class="upload-area @(isDragOver ? "drag-over" : "")" 
                             @ondragover="@HandleDragOver" 
                             @ondragover:preventDefault="true"
                             @ondragleave="@HandleDragLeave"
                             @ondrop="@HandleDrop"
                             @ondrop:preventDefault="true">
                            <InputFile OnChange="@OnFileSelected" 
                                      accept=".pdf" 
                                      class="file-input" 
                                      id="fileInput" />
                            <label for="fileInput" class="upload-label">
                                <div class="upload-icon">
                                    <span class="bi bi-cloud-upload"></span>
                                </div>
                                <div class="upload-text">
                                    <strong>Clique para selecionar</strong> ou arraste o arquivo aqui
                                </div>
                                <div class="upload-hint">
                                    Apenas arquivos PDF até 10MB
                                </div>
                            </label>
                        </div>
                        <ValidationMessage For="@(() => uploadModel.Arquivo)" />
                        
                        @if (arquivoSelecionado != null)
                        {
                            <div class="selected-file mt-3">
                                <div class="d-flex align-items-center">
                                    <span class="bi bi-file-earmark-pdf text-danger me-2"></span>
                                    <div class="flex-grow-1">
                                        <div class="file-name">@arquivoSelecionado.Name</div>
                                        <div class="file-size text-muted">@FormatFileSize(arquivoSelecionado.Size)</div>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="RemoverArquivo">
                                        <span class="bi bi-x"></span>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Área</label>
                        <InputSelect @bind-Value="uploadModel.AreaId" class="form-select">
                            <option value="">Selecione uma área (opcional)</option>
                            @foreach (var area in areas)
                            {
                                <option value="@area.Id">@area.Nome</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Descrição</label>
                        <InputTextArea @bind-Value="uploadModel.Descricao" 
                                      class="form-control" 
                                      rows="3" 
                                      placeholder="Descrição opcional do arquivo..." />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Data de Referência</label>
                        <InputDate @bind-Value="uploadModel.DataReferencia" class="form-control" />
                        <div class="form-text">Data do documento DDO (opcional)</div>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@(isUploading || arquivoSelecionado == null)">
                            @if (isUploading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Enviando...</span>
                            }
                            else
                            {
                                <span class="bi bi-cloud-upload me-2"></span>
                                <span>Enviar Arquivo</span>
                            }
                        </button>
                        
                        <button type="button" class="btn btn-secondary" @onclick="LimparFormulario">
                            <span class="bi bi-arrow-clockwise me-2"></span>
                            Limpar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <span class="bi bi-info-circle me-2"></span>
                    Informações
                </h5>
            </div>
            <div class="card-body">
                <div class="info-item">
                    <strong>Formatos aceitos:</strong>
                    <div class="text-muted">PDF (.pdf)</div>
                </div>
                
                <div class="info-item">
                    <strong>Tamanho máximo:</strong>
                    <div class="text-muted">10 MB por arquivo</div>
                </div>
                
                <div class="info-item">
                    <strong>Verificação:</strong>
                    <div class="text-muted">Arquivos duplicados são detectados automaticamente</div>
                </div>
                
                <div class="info-item">
                    <strong>Organização:</strong>
                    <div class="text-muted">Associe o arquivo a uma área para melhor organização</div>
                </div>
            </div>
        </div>

        @if (ultimosArquivos.Any())
        {
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <span class="bi bi-clock-history me-2"></span>
                        Últimos Uploads
                    </h5>
                </div>
                <div class="card-body">
                    @foreach (var arquivo in ultimosArquivos.Take(5))
                    {
                        <div class="recent-file">
                            <div class="d-flex align-items-center">
                                <span class="bi bi-file-earmark-pdf text-danger me-2"></span>
                                <div class="flex-grow-1">
                                    <div class="file-name">@arquivo.NomeArquivo</div>
                                    <div class="file-date text-muted">@arquivo.DataUpload.ToString("dd/MM/yyyy HH:mm")</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private UploadModel uploadModel = new();
    private IBrowserFile? arquivoSelecionado;
    private List<Area> areas = new();
    private List<ArquivoPDF> ultimosArquivos = new();
    private bool isUploading = false;
    private bool isDragOver = false;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        areas = (await AreaRepository.ObterTodasAtivasAsync()).ToList();
        // TODO: Carregar últimos arquivos do usuário
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        arquivoSelecionado = e.File;
        uploadModel.Arquivo = e.File;
        StateHasChanged();
    }

    private void HandleDragOver()
    {
        isDragOver = true;
    }

    private void HandleDragLeave()
    {
        isDragOver = false;
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        isDragOver = false;
        
        var files = await JSRuntime.InvokeAsync<IJSObjectReference>("getDroppedFiles", e);
        if (files != null)
        {
            // TODO: Implementar lógica de drag & drop
        }
    }

    private async Task HandleUpload()
    {
        if (arquivoSelecionado == null) return;

        isUploading = true;
        StateHasChanged();

        try
        {
            var authState = await AuthenticationStateTask!;
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";

            var resultado = await FileUploadService.UploadArquivoAsync(
                arquivoSelecionado, 
                uploadModel.AreaId, 
                uploadModel.Descricao, 
                userId);

            if (resultado.Sucesso)
            {
                await JSRuntime.InvokeVoidAsync("showAlert", "success", "Sucesso!", resultado.Mensagem);
                LimparFormulario();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showAlert", "error", "Erro!", resultado.Mensagem);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "error", "Erro!", "Ocorreu um erro inesperado. Tente novamente.");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private void RemoverArquivo()
    {
        arquivoSelecionado = null;
        uploadModel.Arquivo = null;
        StateHasChanged();
    }

    private void LimparFormulario()
    {
        uploadModel = new UploadModel();
        arquivoSelecionado = null;
        StateHasChanged();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    public class UploadModel
    {
        public IBrowserFile? Arquivo { get; set; }
        public int? AreaId { get; set; }
        public string? Descricao { get; set; }
        public DateOnly? DataReferencia { get; set; }
    }
}

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    .page-title {
        color: #1e40af;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .page-subtitle {
        color: #6b7280;
        margin-bottom: 0;
    }

    .upload-area {
        border: 2px dashed #d1d5db;
        border-radius: 0.75rem;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s ease;
        background-color: #f9fafb;
        position: relative;
    }

    .upload-area:hover,
    .upload-area.drag-over {
        border-color: #3b82f6;
        background-color: #eff6ff;
    }

    .file-input {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    .upload-label {
        cursor: pointer;
        margin: 0;
    }

    .upload-icon {
        font-size: 3rem;
        color: #9ca3af;
        margin-bottom: 1rem;
    }

    .upload-text {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
    }

    .upload-hint {
        color: #6b7280;
        font-size: 0.875rem;
    }

    .selected-file {
        background-color: #f0f9ff;
        border: 1px solid #bae6fd;
        border-radius: 0.5rem;
        padding: 1rem;
    }

    .file-name {
        font-weight: 500;
        color: #1e40af;
    }

    .file-size {
        font-size: 0.875rem;
    }

    .info-item {
        margin-bottom: 1rem;
    }

    .info-item:last-child {
        margin-bottom: 0;
    }

    .recent-file {
        padding: 0.75rem 0;
        border-bottom: 1px solid #e5e7eb;
    }

    .recent-file:last-child {
        border-bottom: none;
    }

    .file-date {
        font-size: 0.75rem;
    }
</style>
=======
@page "/arquivos/upload"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using DDO.Application.Services
@using DDO.Application.Interfaces
@using DDO.Core.Entities
@using System.Security.Claims
@attribute [Authorize]
@inject FileUploadService FileUploadService
@inject IAreaRepository AreaRepository
@inject IJSRuntime JSRuntime

<PageTitle>Upload de PDFs - DDO Controle de Ponto</PageTitle>

<div class="page-header">
    <h1 class="page-title">
        <span class="bi bi-cloud-upload me-2"></span>
        Upload de Arquivos PDF
    </h1>
    <p class="page-subtitle">Envie arquivos PDF do DDO para o sistema</p>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <span class="bi bi-file-earmark-pdf me-2"></span>
                    Selecionar Arquivo
                </h5>
            </div>
            <div class="card-body">
                <EditForm Model="@uploadModel" OnValidSubmit="@HandleUpload">
                    <DataAnnotationsValidator />
                    
                    <div class="mb-3">
                        <label class="form-label">Arquivo PDF *</label>
                        <div class="upload-area @(isDragOver ? "drag-over" : "")" 
                             @ondragover="@HandleDragOver" 
                             @ondragover:preventDefault="true"
                             @ondragleave="@HandleDragLeave"
                             @ondrop="@HandleDrop"
                             @ondrop:preventDefault="true">
                            <InputFile OnChange="@OnFileSelected" 
                                      accept=".pdf" 
                                      class="file-input" 
                                      id="fileInput" />
                            <label for="fileInput" class="upload-label">
                                <div class="upload-icon">
                                    <span class="bi bi-cloud-upload"></span>
                                </div>
                                <div class="upload-text">
                                    <strong>Clique para selecionar</strong> ou arraste o arquivo aqui
                                </div>
                                <div class="upload-hint">
                                    Apenas arquivos PDF até 10MB
                                </div>
                            </label>
                        </div>
                        <ValidationMessage For="@(() => uploadModel.Arquivo)" />
                        
                        @if (arquivoSelecionado != null)
                        {
                            <div class="selected-file mt-3">
                                <div class="d-flex align-items-center">
                                    <span class="bi bi-file-earmark-pdf text-danger me-2"></span>
                                    <div class="flex-grow-1">
                                        <div class="file-name">@arquivoSelecionado.Name</div>
                                        <div class="file-size text-muted">@FormatFileSize(arquivoSelecionado.Size)</div>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="RemoverArquivo">
                                        <span class="bi bi-x"></span>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Área</label>
                        <InputSelect @bind-Value="uploadModel.AreaId" class="form-select">
                            <option value="">Selecione uma área (opcional)</option>
                            @foreach (var area in areas)
                            {
                                <option value="@area.Id">@area.Nome</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Descrição</label>
                        <InputTextArea @bind-Value="uploadModel.Descricao" 
                                      class="form-control" 
                                      rows="3" 
                                      placeholder="Descrição opcional do arquivo..." />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Data de Referência</label>
                        <InputDate @bind-Value="uploadModel.DataReferencia" class="form-control" />
                        <div class="form-text">Data do documento DDO (opcional)</div>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@(isUploading || arquivoSelecionado == null)">
                            @if (isUploading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Enviando...</span>
                            }
                            else
                            {
                                <span class="bi bi-cloud-upload me-2"></span>
                                <span>Enviar Arquivo</span>
                            }
                        </button>
                        
                        <button type="button" class="btn btn-secondary" @onclick="LimparFormulario">
                            <span class="bi bi-arrow-clockwise me-2"></span>
                            Limpar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <span class="bi bi-info-circle me-2"></span>
                    Informações
                </h5>
            </div>
            <div class="card-body">
                <div class="info-item">
                    <strong>Formatos aceitos:</strong>
                    <div class="text-muted">PDF (.pdf)</div>
                </div>
                
                <div class="info-item">
                    <strong>Tamanho máximo:</strong>
                    <div class="text-muted">10 MB por arquivo</div>
                </div>
                
                <div class="info-item">
                    <strong>Verificação:</strong>
                    <div class="text-muted">Arquivos duplicados são detectados automaticamente</div>
                </div>
                
                <div class="info-item">
                    <strong>Organização:</strong>
                    <div class="text-muted">Associe o arquivo a uma área para melhor organização</div>
                </div>
            </div>
        </div>

        @if (ultimosArquivos.Any())
        {
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <span class="bi bi-clock-history me-2"></span>
                        Últimos Uploads
                    </h5>
                </div>
                <div class="card-body">
                    @foreach (var arquivo in ultimosArquivos.Take(5))
                    {
                        <div class="recent-file">
                            <div class="d-flex align-items-center">
                                <span class="bi bi-file-earmark-pdf text-danger me-2"></span>
                                <div class="flex-grow-1">
                                    <div class="file-name">@arquivo.NomeArquivo</div>
                                    <div class="file-date text-muted">@arquivo.DataUpload.ToString("dd/MM/yyyy HH:mm")</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private UploadModel uploadModel = new();
    private IBrowserFile? arquivoSelecionado;
    private List<Area> areas = new();
    private List<ArquivoPDF> ultimosArquivos = new();
    private bool isUploading = false;
    private bool isDragOver = false;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        areas = (await AreaRepository.ObterTodasAtivasAsync()).ToList();
        // TODO: Carregar últimos arquivos do usuário
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        arquivoSelecionado = e.File;
        uploadModel.Arquivo = e.File;
        StateHasChanged();
    }

    private void HandleDragOver()
    {
        isDragOver = true;
    }

    private void HandleDragLeave()
    {
        isDragOver = false;
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        isDragOver = false;
        
        var files = await JSRuntime.InvokeAsync<IJSObjectReference>("getDroppedFiles", e);
        if (files != null)
        {
            // TODO: Implementar lógica de drag & drop
        }
    }

    private async Task HandleUpload()
    {
        if (arquivoSelecionado == null) return;

        isUploading = true;
        StateHasChanged();

        try
        {
            var authState = await AuthenticationStateTask!;
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";

            var resultado = await FileUploadService.UploadArquivoAsync(
                arquivoSelecionado, 
                uploadModel.AreaId, 
                uploadModel.Descricao, 
                userId);

            if (resultado.Sucesso)
            {
                await JSRuntime.InvokeVoidAsync("showAlert", "success", "Sucesso!", resultado.Mensagem);
                LimparFormulario();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showAlert", "error", "Erro!", resultado.Mensagem);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "error", "Erro!", "Ocorreu um erro inesperado. Tente novamente.");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private void RemoverArquivo()
    {
        arquivoSelecionado = null;
        uploadModel.Arquivo = null;
        StateHasChanged();
    }

    private void LimparFormulario()
    {
        uploadModel = new UploadModel();
        arquivoSelecionado = null;
        StateHasChanged();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    public class UploadModel
    {
        public IBrowserFile? Arquivo { get; set; }
        public int? AreaId { get; set; }
        public string? Descricao { get; set; }
        public DateOnly? DataReferencia { get; set; }
    }
}

<style>
    .page-header {
        margin-bottom: 2rem;
    }

    .page-title {
        color: #1e40af;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .page-subtitle {
        color: #6b7280;
        margin-bottom: 0;
    }

    .upload-area {
        border: 2px dashed #d1d5db;
        border-radius: 0.75rem;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s ease;
        background-color: #f9fafb;
        position: relative;
    }

    .upload-area:hover,
    .upload-area.drag-over {
        border-color: #3b82f6;
        background-color: #eff6ff;
    }

    .file-input {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    .upload-label {
        cursor: pointer;
        margin: 0;
    }

    .upload-icon {
        font-size: 3rem;
        color: #9ca3af;
        margin-bottom: 1rem;
    }

    .upload-text {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
    }

    .upload-hint {
        color: #6b7280;
        font-size: 0.875rem;
    }

    .selected-file {
        background-color: #f0f9ff;
        border: 1px solid #bae6fd;
        border-radius: 0.5rem;
        padding: 1rem;
    }

    .file-name {
        font-weight: 500;
        color: #1e40af;
    }

    .file-size {
        font-size: 0.875rem;
    }

    .info-item {
        margin-bottom: 1rem;
    }

    .info-item:last-child {
        margin-bottom: 0;
    }

    .recent-file {
        padding: 0.75rem 0;
        border-bottom: 1px solid #e5e7eb;
    }

    .recent-file:last-child {
        border-bottom: none;
    }

    .file-date {
        font-size: 0.75rem;
    }
</style>
>>>>>>> b90a182 (Initial commit of DDO project)
